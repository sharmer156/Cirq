#!/usr/bin/env bash

################################################################################
# Transpiles to python 2 and runs pytest on the transpiled code.
#
# Usage:
#     check/pytest2 [--flags] [file-paths-relative-to-repo-root]
#
# You must be in a python 2 environment with 3to2 and protoc present in order to
# run this command.
#
# You may specify additional flags or specific files to test. The file paths
# must be relative to the repository root. If no files are specified, everything
# is tested.
################################################################################

# Get the working directory to the repo root.
cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $(git rev-parse --show-toplevel)

# Do a sanity check that we're actually in python 2 land.
v=$(python --version 2>&1)
h=$(echo "${v}" | grep "Python 2\.7\.")
if [ -z "${h}" ]; then
    echo -e "\e[31mError: 'python --version' was '${v}', not 'Python 2.7.*'.\nDouble-check that you are in a prepared python 2 environment.\e[0m"
    exit 1
fi

# Prepare environment.
out_dir=$(mktemp -d "/tmp/cirq.pytest2.XXXXXXXXXXXXXXXX")
rmdir "${out_dir}"
trap "{ rm -rf ${out_dir}; }" EXIT
trap "exit" INT

# Convert code from python3 to python2.7.
echo "Transpiling to python 2 with destination '${out_dir}'..."
set -e
./dev_tools/python2.7-generate.sh "${out_dir}"
set +e

# Run tests against converted code.
cd "${out_dir}"
pytest $@
